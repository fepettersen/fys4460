\documentclass[a4paper,english, 10pt, twoside]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[english]{babel}
\usepackage{epsfig}
\usepackage{graphicx}
\usepackage{amsfonts, amssymb, amsmath}
\usepackage{listings}
\usepackage{float}	%force figures in place with command \begin{figure}[H]

\usepackage[top=2cm, bottom=2cm, left=2cm, right=2cm]{geometry}



%opening
\title{Project 1, FYS4460}
\author{Fredrik E Pettersen\\ f.e.pettersen@fys.uio.no}

\begin{document}

\maketitle

\newpage
% \begin{abstract}
% In this project we will modell a collection of interacting Argon atoms confined in a box.\\
% \end{abstract}
\tableofcontents
\newpage


\section{About the problem}
The goal of this project is to model systems of Argon atoms using the Lennard-Jones potential. 

\section{The algorithm}
To model the system we will set up an initial distribution of Argon atoms in a face-centered 
cubic lattice and give each atom an initial, random velocity drawn from the Bolzmann distribution. 
Luckily, the armadillo package for C++ has a function for doing this. \\
Since we are working with very small numbers ranging over several orders of magnitude it will 
be usefull to rescale our units. Scaling the position so that $\sigma = 3.405$Ã… is the unit 
length and $\epsilon = k_B\times119.8$K is the unit energy gets us a long way. We can also 
use the Argon mass $m_{Ar} = 39.948$amu ($1amu = 1.66053886 \times10^{-27}$kg).\\
As a means of making the program considearbly more efficient we will divide our volume into 
cells of a predetermined size containing some particles and neglect the single-pair 
forces between particles furter away than $3\sigma$. As we can see from figure \ref{potential} 
this is a rather good approximation. Furthermore the program will now include some sigle-pair 
forces between paritcles up to $6\sigma$ away from each other. \\
\begin{figure}[H]
\centering
\includegraphics[scale=0.6]{plot_potential.png}
\caption{A plot of the Lennard-Jones potential vs the norm of the distance between two atoms.}
\label{potential}
\end{figure}
Finally we will implement a thermostat.

\section{Points of progress}
Step 1 of this implementation is to simply implement Newton's 2. law using the integrator 
given in the project description and visualize this. Seeing as all the pariticles are given 
an initial random velocity, they just keep going in this direction.\\
Step 2 is to use the Lennard-Jones potential to find the force on an atom and the equilibrium 
interatomic distance. We find the single-pair force between two particles by the relation 
$$
\vec{F} = -\nabla U = 24\epsilon\left[2{\sigma^{12}\over r^{13}} - {\sigma^6\over r^7}\right]
$$
We find the equilibrium distance by setting $\vec{F} = 0$ and after some massage we find 
$$
r = \sigma\sqrt[6]{2}
$$\\
Step 3 is to check the increase in speed we get for larger systems after implementing cells 
and neighbour lists. Put simpliy the increase is formidable for large systems, but not really 
noticable for small systems. I did one simulation of $131072$ particles after implementing 
the cells which finished 800 timesteps over night. This simulation would have taken days 
without the implementation of cells.\\
The last step (not counting dealing with the results) is to implement thermostats on the system. 
this is done by rescaling the velocities of each atom in the equilibration phase of the simulation. 
We are asked to implement two thermostats, the Berendsen thermostat 
$$
\gamma = \sqrt{1+{\Delta t\over\tau}\left({T_{bath}\over T}-1\right)}
$$
and the Andersen thermostat where for each atom a uniform random number is generated at each timestep. 
If the number is less than ${\Delta t\over \tau}$ the atom is assigned a new velocity.\\
Implementing the first thermostat allows the system to actually ``break free'' of the crystal lattice 
for realistic temperatures.

\section{Results}
First of all, the initial distribution of Argon is visualized in figure \ref{first} for a lattice 
consisting of 32 atoms. This 
is a so called face centered cubic lattice, where one cube consists of $5\times5\times5 = 25$ 
Argon atoms.
\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{blalbalbla.png}
\caption{The initial configuration of Argon atoms makes a face-centered cubic lattice }
\label{first}
\end{figure} 

Having placed the atoms in the correct formation, we give each atom an initial random velocity 
from the Bolzmann distribution depending on the temperature. \\
For the temperature $T = 119.8K = 1$ in MD units the velocity distribution has 0 mean and 
standard deviation 1. We can check this for the first resultfile (see figure \ref{distribution_vx_t0}).
\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{hist_vx_t0_ncells12_T300.png}
\caption{Velocity distribution at t=0.}
\label{distribution_vx_t0}
\end{figure}
Listed below are some plots of temperature and total energy for a few simulations. We see a clear 
difference in the mean square of the total displacement of an atom from before implementing the 
Berendsen thermostat to after this is implemented (figures \ref{displacement_750K} and 
\ref{displacement_300K_berendsen})

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{plot_energy_8cells_T750.png}
\caption{Total energy of a system of 2048 particles starting out at $T=750K \simeq 6$ in MD 
units. $\Delta t = 0.005$}
\label{energy_750K}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{plot_temperature_8cells_T750.png}
\caption{Temperature of a system of 2048 particles starting out at $T=750K \simeq 6$ in MD 
units.$\Delta t = 0.005$}
\label{temperature_750K}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{plot_meansquare_8cells_T750.png}
\caption{RMS of the total displacement from initial position. The slope of the graph 
is proportional to the Diffusion constant. Simulation of 2048 atoms, $T_0=750K$, no thermostat.}
\label{displacement_750K}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{plot_energy_16cells_T300K_thermostat.png}
\caption{Temperature of a system of 16384 particles starting out at $T=300K \simeq 2.5$ in 
MD units using the Berendsen thermostat. $\Delta t = 0.005$}
\label{energy_300K_berendsen}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{plot_temperature_16cells_T300K_thermostat.png}
\caption{Temperature of a system of 16384 particles starting out at $T=300K \simeq 2.5$ in MD units 
using the Berendsen thermostat. $\Delta t = 0.005$}
\label{temperature_300K_berendsen}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{plot_meansquare_16cells_T300_thermostat.png}
\caption{RMS of the total displacement from initial position. The slope of the graph 
is proportional to the Diffusion constant. Simulation of 16384 atoms, $T_0=300K$, Berendsen thermostat.}
\label{displacement_300K_berendsen}
\end{figure}
The following figures are the results of a simulation where the Andersen thermostat was implemented.

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{plot_meansquare_16cells_T200_andersen.png}
\caption{RMS of the total displacement from initial position. The slope of the graph 
is proportional to the Diffusion constant. Simulation of 16384 atoms, $T_0=200K$, Andersen thermostat.}
\label{displacement_300K_andersen}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[scale=0.5]{plot_temperature_16cells_T200K_andersen.png}
\caption{RMS of the total displacement from initial position. The slope of the graph 
is proportional to the Diffusion constant. Simulation of 16384 atoms, $T_0=200K$, Andersen thermostat.}
\label{temperature_200K_andersen}
\end{figure}
There is a considerable difference between the $T(t)$ graphs using the Berendsen and the Andersen thermostat. 
I think it is a bit weird thatthe temperature drops once the thermostat is turned off (at 100 timesteps). 
There might be some problem with my implementation.\\

The radial distribution of particles is found by 
\section{Stability and precision}
We notice that the system ``creates'' some energy during the simulation. This is of course 
a non-physical artifact which depends on how large $\Delta t$ we use compared to the forces 
between the atoms.
\section{Final comments}
I would like to point out that my program as it is could be more efficient if I'd have 
implemented Newton's third law. As it stands, all single pair forces are calculated twice which 
of course is unnececary. However the program seems to be working, and after 2 weeks of 
debugging I'm happy with that and I can afford to wait twice as long for my program to finish 
(After all it is not a factor 10). 
% \appendix
% \section{Source code}
% \lstinputlisting{system.cpp}
% \lstinputlisting{cell.cpp}
% \lstinputlisting{particle.cpp}
\end{document}
